#pragma once

typedef uint32<2> uint2;
typedef int32<2> int2;
typedef float<2> float2;
typedef int32<3> int3;
typedef float<3> float3;
typedef int32<4> int4;
typedef float<4> float4;

inline uint min_u(uint a, uint b)
{
    return a < b ? a : b;
}

inline uint min_i(int a, int b)
{
    return a < b ? a : b;
}

inline float min_f(float a, float b)
{
    return a < b ? a : b;
}

inline int abs_i(int a)
{
    return a > 0 ? a : -a;
}

inline float abs_f(float v)
{
    return v > 0 ? v : -v;
}

inline float2 abs_f2(float2 v)
{
    float2 ans = { v.x > 0 ? v.x : -v.x, v.y > 0 ? v.y : -v.y };
    return ans;
}

inline float dot_f2(float2 a, float2 b)
{
    return (a.x*b.x + b.y*a.y);
}

inline float dot_f3(float3 a, float3 b)
{
    return (a.x*b.x + b.y*a.y + a.z*b.z);
}

inline float distance_f2(float2 a, float2 b)
{
    return sqrt(dot_f2(a, b));
}

inline float2 normalize_f2(float2 a)
{
    return a / distance_f2(a, a);
}

inline uint2 min_u2(uint2 a, uint2 b)
{
    uint2 r = { min_u(a.x,b.x), min_u(a.y, b.y) }; 
    return r;
}

inline float2 min_f2(float2 a, float2 b)
{
    float2 r = { min_f(a.x,b.x), min_f(a.y, b.y) }; 
    return r;
}

inline int2 abs_i2(int2 v)
{
    int2 r = { abs_i(v.x), abs_i(v.y) };
    return r;
}

inline int3 abs_i3(int3 v)
{
    int3 r = { abs_i(v.x), abs_i(v.y), abs_i(v.z) };
    return r;
}

inline int2 min_i2(int2 a, int2 b)
{
    int2 r = { min_i(a.x,b.x), min_i(a.y, b.y) }; 
    return r;
}

inline int3 min_i3(int3 a, int3 b)
{
    int3 r = { min_i(a.x,b.x), min_i(a.y, b.y), min_i(a.z, b.z) }; 
    return r;
}

inline float fract(float v)
{
    return abs_f(v) - (float)(abs_i((int)v));
}

inline float2 fract_f2(float2 v)
{
    float2 r = { fract(v.x), fract(v.y) };
    return r;
}

inline float3 fract_f3(float3 v)
{
    float3 r = { fract(v.x), fract(v.y), fract(v.z) };
    return r;
}

inline float2 floor_f2(float2 v)
{
    float2 r = { floor(v.x), floor(v.y) };
    return r;
}

inline float3 floor_f3(float3 v)
{
    float3 r = { floor(v.x), floor(v.y), floor(v.z) };
    return r;
}

inline float2 ceil_f2(float2 v)
{
    float2 r = { ceil(v.x), ceil(v.y) };
    return r;
}

inline float3 ceil_f3(float3 v)
{
    float3 r = { ceil(v.x), ceil(v.y), ceil(v.z) };
    return r;
}

inline float lerp(float a, float b, float t) {
    return (1.-t)*a + t*b;
}

//Sampling utilities http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
inline float radicalInverse(int bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return (float)bits * 2.3283064365386963e-10; // / 0x100000000
}

inline float2 hammersley2d(int i, int N)
{
    float2 ret = { (float)i/(float)N, radicalInverse(i) };
    return ret;
}

inline float3 hemisphereSampleUniform(float u, float v)
{
    float phi = v * 2.0 * PI;
    float cosTheta = 1.0 - u;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float3 ret = { cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta };
    return ret;
}
   
inline float3 hemisphereSampleCos(float u, float v)
{
    float phi = v * 2.0 * PI;
    float cosTheta = sqrt(1.0 - u);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float3 ret = { cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta };
    return ret;
}

inline float3 sphereSample(float u, float v)
{
    float phi = v * 2.0 * PI;
    float cosTheta = 2.0*u - 1;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float3 ret = { cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta };
    return ret;
}

inline float2 discSample(float u)
{
    float phi = u * 2.0 * PI;
    float2 ret = { cos(phi), sin(phi) };
    return ret;
}

// LCG values from Numerical Recipes
inline uint irng(uint rng_state)
{
    return 1664525u * rng_state + 1013904223u;
}

struct Image 
{
    uniform int width;
    uniform int height;
    uniform int depth;
    uniform int channels;
    uniform float4 dimensions;
    uniform float4 texelSize;
    uniform float4 halfTexelSize;
    uniform float* data;
};

inline void linearSample2dInfo(
    const uniform Image& image,
    varying float2 uv,
    varying float2& weights,
    varying int4& offsets)
{
    float2 minBox = (uv - image.halfTexelSize.xy) * image.dimensions.xy;
    float2 maxBox = minBox + 1.0f;
    float2 minBoxId = floor_f2(minBox);
    float2 maxBoxId = floor_f2(maxBox);
    weights = maxBox - maxBoxId;

    int2 minBoxIdI = (int2)minBoxId;
    if (minBoxIdI.x < 0)
        minBoxIdI.x += image.width;
    if (minBoxIdI.y < 0)
        minBoxIdI.y += image.height;

    int2 maxBoxIdI = (int2)maxBoxId;
    if (maxBoxIdI.x >= image.width)
        maxBoxIdI.x -= image.width;
    if (maxBoxIdI.y >= image.height)
        maxBoxIdI.y -= image.height;

    int2 p0 = minBoxIdI.xy;
    int2 p1 = { maxBoxIdI.x, minBoxIdI.y }; 
    int2 p2 = { minBoxIdI.x, maxBoxIdI.y };
    int2 p3 = maxBoxIdI.xy;

    offsets.x = p0.x + p0.y*image.width;
    offsets.y = p1.x + p1.y*image.width;
    offsets.z = p2.x + p2.y*image.width;
    offsets.w = p3.x + p3.y*image.width;
}

inline void linearSample3dInfo(
    const uniform Image& image,
    varying float3 uvw,
    varying float3& weights,
    varying int4& offsets0, varying int4& offsets1)
{
    float3 minBox = (uvw - image.halfTexelSize.xyz) * image.dimensions.xyz;
    float3 maxBox = minBox + 1.0f;
    float3 minBoxId = floor_f3(minBox);
    float3 maxBoxId = floor_f3(maxBox);
    weights = maxBox - maxBoxId;

    int3 minBoxIdI = (int3)minBoxId;
    if (minBoxIdI.x < 0)
        minBoxIdI.x += image.width;
    if (minBoxIdI.y < 0)
        minBoxIdI.y += image.height;
    if (minBoxIdI.z < 0)
        minBoxIdI.z += image.depth;

    int3 maxBoxIdI = (int3)maxBoxId;
    if (maxBoxIdI.x >= image.width)
        maxBoxIdI.x -= image.width;
    if (maxBoxIdI.y >= image.height)
        maxBoxIdI.y -= image.height;
    if (maxBoxIdI.z >= image.depth)
        maxBoxIdI.z -= image.depth;

    int3 p00 = minBoxIdI.xyz;
    int3 p01 = { maxBoxIdI.x, minBoxIdI.y, minBoxIdI.z };
    int3 p02 = { minBoxIdI.x, maxBoxIdI.y, minBoxIdI.z };
    int3 p03 = { maxBoxIdI.x, maxBoxIdI.y, minBoxIdI.z };

    int3 p10 = { minBoxIdI.x, minBoxIdI.y, maxBoxIdI.z };
    int3 p11 = { maxBoxIdI.x, minBoxIdI.y, maxBoxIdI.z };
    int3 p12 = { minBoxIdI.x, maxBoxIdI.y, maxBoxIdI.z };
    int3 p13 = maxBoxIdI.xyz;

    int slideStride = image.height * image.width;
    offsets0.x = p00.x + p00.y*image.width + p00.z*slideStride;
    offsets0.y = p01.x + p01.y*image.width + p01.z*slideStride;
    offsets0.z = p02.x + p02.y*image.width + p02.z*slideStride;
    offsets0.w = p03.x + p03.y*image.width + p03.z*slideStride;
    offsets1.x = p10.x + p10.y*image.width + p10.z*slideStride;
    offsets1.y = p11.x + p11.y*image.width + p11.z*slideStride;
    offsets1.z = p12.x + p12.y*image.width + p12.z*slideStride;
    offsets1.w = p13.x + p13.y*image.width + p13.z*slideStride;
}


